---
title: "Sequencing"
editor_options: 
  chunk_output_type: console
---
# Volcano plots

Setup
```{r}
# Always load same package versions
groundhog.day <- "2024-01-01"
groundhog::meta.groundhog(groundhog.day) 
pkgs <-  c("data.table",
           "readxl",
           "ggplot2",
           "ggrepel",
           "here")

groundhog.library(pkgs, groundhog.day)
```


## IL-6 pooled
No sig up or down regulated genes when pooling IL-6 10 and 0.1 ng/ml
```{r}
# Import raw data from the specified Excel file and sheet
file <- here("notebooks/seq/data_raw/IL6_vs_vehicle.xlsx")
il6_pooled_data <- read_xlsx(file, sheet = 1)


setDT(il6_pooled_data)
il6_pooled_data[logCPM > 1 & logFC > 1 & FDR < 0.05]
il6_pooled_data[logCPM > 1 & logFC < -1 & FDR < 0.05]
```
As seen in empty dataframes there are no sig up or downregulated.
Also seen in the volcano plot


```{r}
# Create a new column for labeling differential gene expression
il6_pooled_data$diffexpressed <- "NO" # Default value for genes not differentially expressed

# Identify and label upregulated genes
# Genes with log2FoldChange > 1, FDR < 0.05, and logCPM > 1 are labeled as "UP"
il6_pooled_data$diffexpressed[il6_pooled_data$logFC > 1 & il6_pooled_data$FDR < 0.05 & il6_pooled_data$logCPM > 1] <- "UP"

# Identify and label downregulated genes
# Genes with log2FoldChange < -1, FDR < 0.05, and logCPM > 1 are labeled as "DOWN"
il6_pooled_data$diffexpressed[il6_pooled_data$logFC < -1 & il6_pooled_data$FDR < 0.05 & il6_pooled_data$logCPM > 1] <- "DOWN"

# Initialize 'delabel' column to NA for all rows to create the column
il6_pooled_data$delabel <- NA

# Now, you can safely assign gene names to the 'delabel' column for differentially expressed genes
il6_pooled_data$delabel[il6_pooled_data$diffexpressed != "NO"] <- il6_pooled_data$genes[il6_pooled_data$diffexpressed != "NO"]
```

```{r}
# Create the volcano plot using ggplot2
plot_volcano_il6_pooled <- 
  ggplot(data=il6_pooled_data, aes(x=logFC, y=-log10(FDR), col=diffexpressed, label=delabel)) + 
    theme_minimal() + # Use a minimal theme for the plot
    geom_text_repel(max.overlaps = 7) + # Use repelling text to avoid label overlap
    scale_color_manual(values=c("blue", "black", "red")) + # Custom colors for differential expression
    geom_vline(xintercept=c(-1, 1), col="dark grey") + # Vertical lines for fold change thresholds
    geom_hline(yintercept=-log10(0.05), col="dark grey") + # Horizontal line for FDR threshold
    geom_point() + # Add points for each gene
    labs(color = 'Direction of gene expression', # Customize legend title
         x = expression("log"[2]*"FC (IL6 vs Vehicle)"), # Customize x-axis label
         y = expression("-log"[10]*"FDR")) + # Customize y-axis label
    #scale_x_continuous(breaks = seq(-11, 9, 2)) + # Customize x-axis breaks
    #scale_y_continuous(breaks = seq(0, 90, 10)) + # Customize y-axis breaks
    theme(panel.grid.minor.y = element_blank(), panel.grid.minor.x = element_blank())+ # Adjust minor grid lines
    ggtitle('Volcano Plot: IL6 vs Vehicle') # Add a title to the plot

plot_volcano_il6_pooled

```

## IL-6 10 ng/ml
```{r}
# Import raw data from the specified Excel file and sheet
file <- here("notebooks/seq/data_raw/IL6_10_vs_vehicle.xlsx")
il6_10_data <- read_xlsx(file, sheet = 1)
```


```{r}
#| label: fig-volcano-il6-10
#| fig-cap: "Volcano plot. IL-6 10 ng/ml vs. vehicle control. Vertical lines for fold change thresholds"
#| warning: false

# Create a new column for labeling differential gene expression
il6_10_data$diffexpressed <- "NO" # Default value for genes not differentially expressed

# Identify and label upregulated genes
# Genes with log2FoldChange > 1, FDR < 0.05, and logCPM > 1 are labeled as "UP"
il6_10_data$diffexpressed[il6_10_data$logFC > 1 & il6_10_data$FDR < 0.05 & il6_10_data$logCPM > 1] <- "UP"

# Identify and label downregulated genes
# Genes with log2FoldChange < -1, FDR < 0.05, and logCPM > 1 are labeled as "DOWN"
il6_10_data$diffexpressed[il6_10_data$logFC < -1 & il6_10_data$FDR < 0.05 & il6_10_data$logCPM > 1] <- "DOWN"

# Initialize 'delabel' column to NA for all rows to create the column
il6_10_data$delabel <- NA

# Now, you can safely assign gene names to the 'delabel' column for differentially expressed genes
il6_10_data$delabel[il6_10_data$diffexpressed != "NO"] <- il6_10_data$genes[il6_10_data$diffexpressed != "NO"]

# Create the volcano plot using ggplot2
plot_volcano_il6_10 <- 
  ggplot(data=il6_10_data, aes(x=logFC, y=-log10(FDR), col=diffexpressed, label=delabel)) + 
    theme_minimal() + # Use a minimal theme for the plot
    geom_text_repel(max.overlaps = 10) + # Use repelling text to avoid label overlap
    scale_color_manual(values=c("blue", "black", "red")) + # Custom colors for differential expression
    geom_vline(xintercept=c(-1, 1), col="dark grey", linetype = "dashed") + # Vertical lines for fold change thresholds
    geom_hline(yintercept=-log10(0.05), col="dark grey", linetype = "dashed") + # Horizontal line for FDR threshold
    geom_point() + # Add points for each gene
    labs(color = 'Direction of gene expression', # Customize legend title
         x = expression("log"[2]*"FC (IL6 vs Vehicle)"), # Customize x-axis label
         y = expression("-log"[10]*"FDR")) + # Customize y-axis label
    scale_x_continuous(limits = c(-8, 10)) + # Customize x-axis breaks
    scale_y_continuous(limits = c(0, 320)) + # Customize y-axis breaks
    theme(panel.grid.minor.y = element_blank(),# Remove minor grid lines
          panel.grid.minor.x = element_blank(),# Remove minor grid lines
          legend.position = "bottom" 
          )+ 
    ggtitle('Volcano Plot: IL6 10 ng/ml vs Vehicle') # Add a title to the plot


plot_volcano_il6_10

# ggsave(filename = here("notebooks/seq/output/IL_6_10ng_volcano.png"))
```

Trying to ad a box around the out of bounds data points. They have a smaller FDR than can be handled.
```{r}
# # Adjusting the dataset to include points with FDR of 0
# il6_10_data$adjusted_FDR <- ifelse(il6_10_data$FDR == 0, 340, -log10(il6_10_data$FDR))
# 
# # Create the volcano plot using ggplot2
# plot_volcano_il6_10 <- 
#   ggplot(data=il6_10_data, aes(x=logFC, y=adjusted_FDR, col=diffexpressed, label=delabel)) + 
#     theme_minimal() +
#     geom_text_repel(max.overlaps = 10) +
#     scale_color_manual(values=c("blue", "black", "red")) +
#     geom_vline(xintercept=c(-1, 1), col="dark grey", linetype = "dashed") +
#     geom_hline(yintercept=-log10(0.05), col="dark grey", linetype = "dashed") + # Use the new adjusted value
#     geom_point() +
#     labs(color = 'Direction of gene expression',
#          x = expression("log"[2]*"FC (IL6 vs Vehicle)"),
#          y = expression("-log"[10]*"Adjusted FDR")) +
#     scale_x_continuous(limits = c(-8, 10)) +
#     scale_y_continuous(limits = c(0, 450)) +
#     theme(
#       panel.grid.minor.y = element_blank(),
#       panel.grid.minor.x = element_blank(),
#       legend.position = "bottom"
#     ) +
#     annotate("rect", xmin = 1, xmax = 10, ymin = 320, ymax = 340, alpha = .2, color = "black") +
#     ggtitle('Volcano Plot: IL6 10 ng/ml vs Vehicle')
# 
# # Display the plot
# plot_volcano_il6_10


```

## IL-6 0.1 ng/ml
```{r}
# Import raw data from the specified Excel file and sheet
file <- here("notebooks/seq/data_raw/IL6_0.1_vs_vehicle.xlsx")
il6_0.1_data <- read_xlsx(file, sheet = 1)


setDT(il6_0.1_data)
il6_0.1_data[logCPM > 1 & FDR < 0.05 & logFC > 0] |> nrow()
il6_0.1_data[logCPM > 1 & FDR < 0.05 & logFC < 0] |> nrow()
```
Ikke nogen der er signifikant opreguleret nÃ¥r logFC > 1
Kun to signifikant nedregulerede ved logFC < -1

```{r}
#| label: fig-volcano-il6-0.1
#| fig-cap: "Volcano plot. IL-6 0.1 ng/ml vs. vehicle control. Vertical lines for fold change thresholds. Note few significant above 2 fold change"
#| warning: false

# Create a new column for labeling differential gene expression
il6_0.1_data$diffexpressed <- "NO" # Default value for genes not differentially expressed

# Identify and label upregulated genes
# Genes with log2FoldChange > 1, FDR < 0.05, and logCPM > 1 are labeled as "UP"
il6_0.1_data$diffexpressed[il6_0.1_data$FDR < 0.05 & il6_0.1_data$logCPM > 1 & il6_0.1_data$logFC > 0] <- "UP"

# Identify and label downregulated genes
# Genes with log2FoldChange < -1, FDR < 0.05, and logCPM > 1 are labeled as "DOWN"
il6_0.1_data$diffexpressed[il6_0.1_data$FDR < 0.05 & il6_0.1_data$logCPM > 1 & il6_0.1_data$logFC < 0] <- "DOWN"

# Initialize 'delabel' column to NA for all rows to create the column
il6_0.1_data$delabel <- NA

# Now, you can safely assign gene names to the 'delabel' column for differentially expressed genes
il6_0.1_data$delabel[il6_0.1_data$diffexpressed != "NO"] <- il6_0.1_data$genes[il6_0.1_data$diffexpressed != "NO"]

# Create the volcano plot using ggplot2
plot_volcano_il6_0.1 <- 
  ggplot(data=il6_0.1_data, aes(x=logFC, y=-log10(FDR), col=diffexpressed, label=delabel)) + 
    theme_minimal() + # Use a minimal theme for the plot
    geom_text_repel(max.overlaps = 10) + # Use repelling text to avoid label overlap
    scale_color_manual(values=c("blue", "black", "red")) + # Custom colors for differential expression
    geom_vline(xintercept=c(-1, 1), col="dark grey", linetype = "dashed") + # Vertical lines for fold change thresholds
    geom_hline(yintercept=-log10(0.05), col="dark grey", linetype = "dashed") + # Horizontal line for FDR threshold
    geom_point() + # Add points for each gene
    labs(color = 'Direction of gene expression', # Customize legend title
         x = expression("log"[2]*"FC (IL6 vs Vehicle)"), # Customize x-axis label
         y = expression("-log"[10]*"FDR")) + # Customize y-axis label
    #scale_x_continuous(limits = c(-8, 10)) + # Customize x-axis breaks
    #scale_y_continuous(limits = c(0, 320)) + # Customize y-axis breaks
    theme(panel.grid.minor.y = element_blank(),# Remove minor grid lines
          panel.grid.minor.x = element_blank(),# Remove minor grid lines
          legend.position = "bottom" 
          )+ 
    ggtitle('Volcano Plot: IL6 0.1 ng/ml vs Vehicle') # Add a title to the plot


plot_volcano_il6_0.1

# ggsave(filename = here("notebooks/seq/output/IL_6_01ng_volcano.png"))

```


## IL-1B pooled
```{r}
# Import raw data from the specified Excel file and sheet
file <- here("notebooks/seq/data_raw/IL1B_vs_vehicle.xlsx")
il1B_pooled_data <- read_xlsx(file, sheet = 1)


setDT(il1B_pooled_data)
il1B_pooled_data[logCPM > 1 & FDR < 0.05 & logFC > 1] |> nrow()
il1B_pooled_data[logCPM > 1 & FDR < 0.05 & logFC < 1] |> nrow()
```

```{r}
#| label: fig-volcano-il1B-pooled
#| fig-cap: "Volcano plot. IL-1B pooled vs. vehicle control. Vertical lines for fold change thresholds"
#| warning: false

# Create a new column for labeling differential gene expression
il1B_pooled_data$diffexpressed <- "NO" # Default value for genes not differentially expressed

# Identify and label upregulated genes
# Genes with log2FoldChange > 1, FDR < 0.05, and logCPM > 1 are labeled as "UP"
il1B_pooled_data$diffexpressed[il1B_pooled_data$FDR < 0.05 & il1B_pooled_data$logCPM > 1 & il1B_pooled_data$logFC > 0] <- "UP"

# Identify and label downregulated genes
# Genes with log2FoldChange < -1, FDR < 0.05, and logCPM > 1 are labeled as "DOWN"
il1B_pooled_data$diffexpressed[il1B_pooled_data$FDR < 0.05 & il1B_pooled_data$logCPM > 1 & il1B_pooled_data$logFC < 0] <- "DOWN"

# Initialize 'delabel' column to NA for all rows to create the column
il1B_pooled_data$delabel <- NA

# Now, you can safely assign gene names to the 'delabel' column for differentially expressed genes
il1B_pooled_data$delabel[il1B_pooled_data$diffexpressed != "NO"] <- il1B_pooled_data$genes[il1B_pooled_data$diffexpressed != "NO"]

# Create the volcano plot using ggplot2
plot_volcano_il1B_pooled <- 
  ggplot(data=il1B_pooled_data, aes(x=logFC, y=-log10(FDR), col=diffexpressed, label=delabel)) + 
    theme_minimal() + # Use a minimal theme for the plot
    geom_text_repel(max.overlaps = 10) + # Use repelling text to avoid label overlap
    scale_color_manual(values=c("blue", "black", "red")) + # Custom colors for differential expression
    geom_vline(xintercept=c(-1, 1), col="dark grey", linetype = "dashed") + # Vertical lines for fold change thresholds
    geom_hline(yintercept=-log10(0.05), col="dark grey", linetype = "dashed") + # Horizontal line for FDR threshold
    geom_point() + # Add points for each gene
    labs(color = 'Direction of gene expression', # Customize legend title
         x = expression("log"[2]*"FC (IL6 vs Vehicle)"), # Customize x-axis label
         y = expression("-log"[10]*"FDR")) + # Customize y-axis label
    #scale_x_continuous(limits = c(-8, 10)) + # Customize x-axis breaks
    #scale_y_continuous(limits = c(0, 320)) + # Customize y-axis breaks
    theme(panel.grid.minor.y = element_blank(),# Remove minor grid lines
          panel.grid.minor.x = element_blank(),# Remove minor grid lines
          legend.position = "bottom" 
          )+ 
    ggtitle('Volcano Plot: IL1B pooled vs Vehicle') # Add a title to the plot


plot_volcano_il1B_pooled

# ggsave(filename = here("notebooks/seq/output/IL_1B_10ng_volcano.png"))

```


## IL-1B 10 ng/ml
```{r}
# Import raw data from the specified Excel file and sheet
file <- here("notebooks/seq/data_raw/IL1B_10_vs_vehicle.xlsx")
il1B_10_data <- read_xlsx(file, sheet = 1)


# setDT(il1B_10_data)
# il1B_10_data[logCPM > 1 & FDR < 0.05 & logFC > 1] |> nrow()
# il1B_10_data[logCPM > 1 & FDR < 0.05 & logFC < 1] |> nrow()
```


```{r}
#| label: fig-volcano-il1B-10
#| fig-cap: "Volcano plot. IL-1B 10 ng/ml vs. vehicle control. Vertical lines for fold change thresholds"
#| warning: false

# Create a new column for labeling differential gene expression
il1B_10_data$diffexpressed <- "NO" # Default value for genes not differentially expressed

# Identify and label upregulated genes
# Genes with log2FoldChange > 1, FDR < 0.05, and logCPM > 1 are labeled as "UP"
il1B_10_data$diffexpressed[il1B_10_data$FDR < 0.05 & il1B_10_data$logCPM > 1 & il1B_10_data$logFC > 1] <- "UP"

# Identify and label downregulated genes
# Genes with log2FoldChange < -1, FDR < 0.05, and logCPM > 1 are labeled as "DOWN"
il1B_10_data$diffexpressed[il1B_10_data$FDR < 0.05 & il1B_10_data$logCPM > 1 & il1B_10_data$logFC < -1] <- "DOWN"

# Initialize 'delabel' column to NA for all rows to create the column
il1B_10_data$delabel <- NA

# Now, you can safely assign gene names to the 'delabel' column for differentially expressed genes
il1B_10_data$delabel[il1B_10_data$diffexpressed != "NO"] <- il1B_10_data$genes[il1B_10_data$diffexpressed != "NO"]

# Legend numbers
category_counts <- table(il1B_10_data$diffexpressed)
labels_with_counts <- paste(names(category_counts), "(", category_counts, " genes)", sep = "")

# Create the volcano plot using ggplot2
plot_volcano_il1B_10 <- 
  ggplot(data=il1B_10_data,
         aes(x=logFC,
             y=-log10(FDR),
             col=diffexpressed,
             label=delabel
             )
         ) + 
    theme_minimal() + # Use a minimal theme for the plot
        geom_text_repel(max.overlaps = 1,
                        # size = 3,
                        nudge_x = .25,
                        nudge_y = .25,
                        # point.padding = 0.5,
                        # box.padding = .5,
                        # force = 1
                        ) + 
    scale_color_manual(values=c("blue", "black", "red"), # Custom colors for differential expression
                       labels = labels_with_counts       # Use the labels with gene counts.
                       ) + 
    geom_vline(xintercept=c(-1, 1), col="dark grey", linetype = "dashed") + # Vertical lines for fold change thresholds
    geom_hline(yintercept=-log10(0.05), col="dark grey", linetype = "dashed") + # Horizontal line for FDR threshold
    geom_point() + # Add points for each gene
    labs(color = 'Direction of gene expression', # Customize legend title
         x = expression("log"[2]*"FC"), # Customize x-axis label
         y = expression("-log"[10]*"FDR")) + # Customize y-axis label
    #scale_x_continuous(limits = c(-8, 10)) + # Customize x-axis breaks
    #scale_y_continuous(limits = c(0, 320)) + # Customize y-axis breaks
    theme(panel.grid.minor.y = element_blank(),# Remove minor grid lines
          panel.grid.minor.x = element_blank(),# Remove minor grid lines
          legend.position = "bottom" 
          )+ 
    ggtitle('Volcano Plot: IL1B 10 ng/ml vs Vehicle') # Add a title to the plot


plot_volcano_il1B_10

ggsave(filename = here("notebooks/seq/output/IL_1B_10ng_volcano.png"))
ggsave(filename = here("notebooks/seq/output/IL_1B_10ng_volcano.pdf"))




```

Tables with top xx down or upregulated genes?
```{r}

```


## IL-1B 0.1 ng/ml
```{r}
# Import raw data from the specified Excel file and sheet
file <- here("notebooks/seq/data_raw/IL1B_0.1_vs_vehicle.xlsx")
il1B_0.1_data <- read_xlsx(file, sheet = 1)


setDT(il1B_0.1_data)
il1B_0.1_data[logCPM > 1 & FDR < 0.05 & logFC > 1] |> nrow()
il1B_0.1_data[logCPM > 1 & FDR < 0.05 & logFC < 1] |> nrow()
```


```{r}
#| label: fig-volcano-il1B-0.1
#| fig-cap: "Volcano plot. IL-1B 0.1 ng/ml vs. vehicle control. Vertical lines for fold change thresholds"
#| warning: false

# Create a new column for labeling differential gene expression
il1B_0.1_data$diffexpressed <- "NO" # Default value for genes not differentially expressed

# Identify and label upregulated genes
# Genes with log2FoldChange > 1, FDR < 0.05, and logCPM > 1 are labeled as "UP"
il1B_0.1_data$diffexpressed[il1B_0.1_data$FDR < 0.05 & il1B_0.1_data$logCPM > 1 & il1B_0.1_data$logFC > 1] <- "UP"

# Identify and label downregulated genes
# Genes with log2FoldChange < -1, FDR < 0.05, and logCPM > 1 are labeled as "DOWN"
il1B_0.1_data$diffexpressed[il1B_0.1_data$FDR < 0.05 & il1B_0.1_data$logCPM > 1 & il1B_0.1_data$logFC < -1] <- "DOWN"

# Initialize 'delabel' column to NA for all rows to create the column
il1B_0.1_data$delabel <- NA

# Now, you can safely assign gene names to the 'delabel' column for differentially expressed genes
il1B_0.1_data$delabel[il1B_0.1_data$diffexpressed != "NO"] <- il1B_0.1_data$genes[il1B_0.1_data$diffexpressed != "NO"]


# Legend numbers
category_counts <- table(il1B_0.1_data$diffexpressed)
labels_with_counts <- paste(names(category_counts), "(", category_counts, " genes)", sep = "")

# Create the volcano plot using ggplot2
plot_volcano_il1B_0.1 <- 
  ggplot(data=il1B_0.1_data, aes(x=logFC, y=-log10(FDR), col=diffexpressed, label=delabel)) + 
    theme_minimal() + # Use a minimal theme for the plot
    geom_text_repel(max.overlaps = 1,
                    # size = 2.5,
                    # nudge_x = .25,
                    # nudge_y = .25,
                    # point.padding = 0.5,
                    # box.padding = 0.5,
                    # force = 1
                    ) + 
    scale_color_manual(values=c("blue", "black", "red"), # Custom colors for differential expression
                       labels = labels_with_counts         # Custom labels with counts
                       ) + 
    #scale_color_viridis_d(option = "H")+
    geom_vline(xintercept=c(-1, 1), col="dark grey", linetype = "dashed") + # Vertical lines for fold change thresholds
    geom_hline(yintercept=-log10(0.05), col="dark grey", linetype = "dashed") + # Horizontal line for FDR threshold
    geom_point() + # Add points for each gene
    labs(color = 'Direction of gene expression', # Customize legend title
         x = expression("log"[2]*"FC"), # Customize x-axis label
         y = expression("-log"[10]*"FDR")) + # Customize y-axis label
    #scale_x_continuous(limits = c(-8, 10)) + # Customize x-axis breaks
    #scale_y_continuous(limits = c(0, 320)) + # Customize y-axis breaks
    theme(panel.grid.minor.y = element_blank(),# Remove minor grid lines
          panel.grid.minor.x = element_blank(),# Remove minor grid lines
          legend.position = "bottom" 
          )+ 
    ggtitle('Volcano Plot: IL1B 0.1 ng/ml vs Vehicle') # Add a title to the plot


plot_volcano_il1B_0.1

# ggsave(filename = here("notebooks/seq/output/IL_1B_01ng_volcano.png"))
# ggsave(filename = here("notebooks/seq/output/IL_1B_01ng_volcano.pdf"))
```

## Abemaciclib 5 ÂµM 
```{r}
# Import raw data from the specified Excel file and sheet
file <- here("notebooks/seq/data_raw/abe_vs_vehicle.xlsx")
abe_data <- read_xlsx(file, sheet = 1)


setDT(abe_data)
abe_data[logCPM > 1 & FDR < 0.05 & logFC > 1] 
abe_data[logCPM > 1 & FDR < 0.05 & logFC < 1] 
```


```{r}
# #| label: fig-abemaceclib
# #| fig-cap: "Volcano plot. Abemaciclib vs. vehicle control. Vertical lines for fold change thresholds"
# #| warning: false
# 
# # Create a new column for labeling differential gene expression
# abe_data$diffexpressed <- "NO" # Default value for genes not differentially expressed
# 
# # Identify and label upregulated genes
# # Genes with log2FoldChange > 1, FDR < 0.05, and logCPM > 1 are labeled as "UP"
# abe_data$diffexpressed[abe_data$FDR < 0.05 & abe_data$logCPM > 1 & abe_data$logFC > 0] <- "UP"
# 
# # Identify and label downregulated genes
# # Genes with log2FoldChange < -1, FDR < 0.05, and logCPM > 1 are labeled as "DOWN"
# abe_data$diffexpressed[abe_data$FDR < 0.05 & abe_data$logCPM > 1 & abe_data$logFC < 0] <- "DOWN"
# 
# # Initialize 'delabel' column to NA for all rows to create the column
# abe_data$delabel <- NA
# 
# # Now, you can safely assign gene names to the 'delabel' column for differentially expressed genes
# abe_data$delabel[abe_data$diffexpressed != "NO"] <- abe_data$genes[abe_data$diffexpressed != "NO"]
# 
# # Create the volcano plot using ggplot2
# plot_volcano_abe <- 
#   ggplot(data=abe_data, aes(x=logFC, y=-log10(FDR), col=diffexpressed, label=delabel)) + 
#     theme_minimal() + # Use a minimal theme for the plot
#     geom_text_repel() + # Use repelling text to avoid label overlap
#     scale_color_manual(values=c("blue", "black", "red")) + # Custom colors for differential expression
#     geom_vline(xintercept=c(-1, 1), col="dark grey", linetype = "dashed") + # Vertical lines for fold change thresholds
#     geom_hline(yintercept=-log10(0.05), col="dark grey", linetype = "dashed") + # Horizontal line for FDR threshold
#     geom_point() + # Add points for each gene
#     labs(color = 'Direction of gene expression', # Customize legend title
#          x = expression("log"[2]*"FC (IL6 vs Vehicle)"), # Customize x-axis label
#          y = expression("-log"[10]*"FDR")) + # Customize y-axis label
#     #scale_x_continuous(limits = c(-8, 10)) + # Customize x-axis breaks
#     #scale_y_continuous(limits = c(0, 320)) + # Customize y-axis breaks
#     theme(panel.grid.minor.y = element_blank(),# Remove minor grid lines
#           panel.grid.minor.x = element_blank(),# Remove minor grid lines
#           legend.position = "bottom",
#           panel.background = element_rect(fill = "white")
#           )+ 
#   coord_flip() +
#     ggtitle('Volcano Plot: 5 ÂµM abemaciclib vs Vehicle') # Add a title to the plot 
# 
# 
# 
# plot_volcano_abe
# 
# ggsave(filename = here("notebooks/seq/output/abe_volcano.png"))
```

# GSEA


## Visualization of GSEA

#### Setup

```{r}
library(here)
library(readxl)
library(tidyverse)
library(patchwork)
```

### IL-1B 10 ng

#### KEGG

Testing just KEGG. Getting the code to work for one file.

```{r}
path_raw_data <- here("notebooks/seq/data_raw/GSEA/")
gsea_data <- read_excel(here(path_raw_data, "KEGG_IL1B_10_vs_vehicle.xlsx"))
```

```{r}
plot_data <- 
  arrange(gsea_data, -abs(NES)) %>% 
    group_by(sign(NES)) %>%
    slice(1:20)
```

```{r}
ggplot(data = plot_data,
       aes(x = NES,
           y = fct_reorder(pathway, NES),
           fill = padj
           )
       ) +
  geom_bar(stat = "identity") +
  scale_fill_distiller(type = "seq", palette = "YlOrRd")
  #scale_fill_continuous(low='red', high='blue', guide=guide_colorbar(reverse=TRUE), ) 
```

```{r}
ggplot(plot_data, aes(x = NES, y = fct_reorder(pathway, NES), color = padj, size = size)) + 
  geom_point(stat = 'identity') + 
  xlab("ratio") + ylab("path") + ggtitle("your data") + 
  theme_bw() + 
  scale_color_viridis_c() +
  #scale_color_distiller(type = "seq", palette = "PuRd") +
  geom_vline(xintercept = 0)
```

### All KEGG plots

Plot all using a function

```{r}
# Get file paths
kegg_file_paths <- dir(here("notebooks/seq/data_raw/GSEA"), pattern = "KEGG", full.names = TRUE)

# Subset to interleukines if wanted
#kegg_file_paths[grep(pattern = "IL", kegg_file_paths)]
```

```{r}
KEGG_plot_list <- map(kegg_file_paths, function(file_path) {
  # Read the file
  plot_data <- read_excel(file_path)
  
  # Process the data
  processed_data <- plot_data %>%
    arrange(desc(abs(NES))) %>%
    group_by(sign_NES = sign(NES)) %>%
    slice_head(n = 10) %>%
    ungroup() %>%
    filter(padj <= 0.05) %>%
    mutate(pathway = str_remove_all(pathway, "KEGG_"),
           pathway = str_replace_all(pathway, pattern = "_", replacement = " "),
           pathway = str_to_title(pathway))

  
  # Generate the plot
  ggplot(processed_data,
         aes(x = NES,
             y = fct_reorder(pathway, NES),
             color = padj,
             size = size
             )
         ) +
    geom_point(stat = 'identity') +
    labs(x = "NES",
         y = "Pathway",
         title = paste("Top 10 up/down Pathways for","", basename(file_path))
         ) +
    theme_bw() +
    geom_vline(xintercept = 0) +
    scale_color_viridis_c()
    #scale_color_distiller(type = "seq", palette = "YlOrRd") #+
    #theme(axis.text.y = element_text(size = 8))
})

```

```{r}
#| label: fig-kegg-abe

KEGG_plot_list[[1]]
```

```{r}
#| label: fig-kegg-il1b-0.1

KEGG_plot_list[[2]]
```

```{r}
#| label: fig-kegg-il1b-10

KEGG_plot_list[[3]]
```

```{r}
#| label: fig-kegg-il6-0.1

KEGG_plot_list[[4]]
```

```{r}
#| label: fig-kegg-il6-10

KEGG_plot_list[[5]]
```

```{r}
#| label: fig-kegg-il6-combined

KEGG_plot_list[[6]]
```

```{r}
#| label: fig-kegg-medium

KEGG_plot_list[[7]]
```

```{r}
#| label: fig-kegg-rif

KEGG_plot_list[[8]]
```

#### ALL BIOCARTA

**Plot all using a function**

Get all file paths related to BIOCARTA

```{r}
# Get file paths
biocarta_file_paths <- dir(here("notebooks/seq/data_raw/GSEA"), pattern = "BIOCARTA", full.names = TRUE)

# Subset to interleukines if wanted
# kegg_file_paths[grep(pattern = "IL", kegg_file_paths)]
```

```{r}
BIOCARTA_plot_list <- map(biocarta_file_paths, function(file_path) {
  # Read the file
  plot_data <- read_excel(file_path)
  
  # Process the data
  processed_data <- plot_data %>%
    arrange(desc(abs(NES))) %>%
    group_by(sign_NES = sign(NES)) %>%
    slice_head(n = 10) %>%
    ungroup() %>%
    filter(padj <= 0.05) %>%
    mutate(pathway = str_remove_all(pathway, "BIOCARTA"),
           pathway = str_replace_all(pathway, pattern = "_", replacement = " "),
           pathway = str_to_title(pathway))
  
  # Generate the plot
  ggplot(processed_data, aes(x = NES, y = fct_reorder(pathway, NES), color = padj, size = size)) +
    geom_point(stat = 'identity') +
    labs(x = "NES", y = "Pathway", title = paste("Top 10 up/down Pathways for","", basename(file_path))) +
    theme_bw() +
    geom_vline(xintercept = 0) +
    scale_color_viridis_c()
    #scale_color_distiller(type = "seq", palette = "YlOrRd") #+
    #theme(legend.position = "none") # Remove legend to focus on the data
})
```

```{r}
#| label: fig-biocarta-abe
BIOCARTA_plot_list[[1]]
```

```{r}
#| label: fig-biocarta-il1b-0.1
BIOCARTA_plot_list[[2]]
```

```{r}
#| label: fig-biocarta-il1b-10
BIOCARTA_plot_list[[3]]
```

```{r}
#| label: fig-biocarta-il6-0.1
BIOCARTA_plot_list[[4]]
```

```{r}
#| label: fig-biocarta-il6-10
BIOCARTA_plot_list[[5]]
```

```{r}
#| label: fig-biocarta-il6-combined
BIOCARTA_plot_list[[6]]
```

```{r}
#| label: fig-biocarta-medium
BIOCARTA_plot_list[[7]]
```

```{r}
#| label: fig-biocarta-rif
BIOCARTA_plot_list[[8]]
```

### REACTOME

Get all file paths related to Reactome

```{r}
# Get file paths
reactome_file_paths <- dir(here("notebooks/seq/data_raw/GSEA"), pattern = "REACTOME", full.names = TRUE)

# Subset to interleukines if wanted
# kegg_file_paths[grep(pattern = "IL", kegg_file_paths)]
```

```{r}
REACTOME_plot_list <- map(reactome_file_paths, function(file_path) {
  # Read the file
  plot_data <- read_excel(file_path)
  
  # Process the data
  processed_data <- plot_data %>%
    arrange(desc(abs(NES))) %>%
    group_by(sign_NES = sign(NES)) %>%
    slice_head(n = 10) %>%
    ungroup() %>%
    filter(padj <= 0.05) %>%
    mutate(pathway = str_remove_all(pathway, "REACTOME_"),
           pathway = str_replace_all(pathway, pattern = "_", replacement = " "),
           pathway = str_to_title(pathway))
  
  # Generate the plot
  ggplot(processed_data,
         aes(x = NES,
             y = fct_reorder(pathway, NES),
             color = padj,
             size = size
             )
         ) +
    geom_point(stat = 'identity') +
    labs(x = "NES",
         y = "Pathway",
         title = paste("Top 10 up/down Pathways for","", basename(file_path))
         ) +
    theme_bw() +
    geom_vline(xintercept = 0) +
    scale_color_viridis_c() 
    #scale_color_distiller(type = "seq", palette = "YlOrRd") #+
    #theme(legend.position = "none") # Remove legend to focus on the data
})
```

```{r}
#| label: fig-reactome-abe

REACTOME_plot_list[[1]]
```

```{r}
#| label: fig-reactome-il1b-0.1

REACTOME_plot_list[[2]]
```

```{r}
#| label: fig-reactome-il1b-10

REACTOME_plot_list[[3]]
```

```{r}
#| label: fig-reactome-il6-0.1

REACTOME_plot_list[[4]]
```

```{r}
#| label: fig-reactome-il6-10

REACTOME_plot_list[[5]]
```

```{r}
#| label: fig-reactome-il6-combined

REACTOME_plot_list[[6]]
```

```{r}
#| label: fig-reactome-medium

REACTOME_plot_list[[7]]
```

```{r}
#| label: fig-reactome-rif

REACTOME_plot_list[[8]]
```

### GO combined databases

CONSIDER :Split data into each of the GO databases:

1.  **Biological Process (BP)**, which describes the biological objectives to which the gene or gene product contributes.
2.  **Molecular Function (MF**), which describes the elemental activities of a gene product at the molecular level, such as binding or catalysis.
3.  **Cellular Component (CC)**, which describes where in the cell the gene product is active.

Get all file paths related to GO

```{r}
# Get file paths
go_file_paths <- dir(here("notebooks/seq/data_raw/GSEA"), pattern = "GO", full.names = TRUE)

# Subset to interleukines if wanted
# kegg_file_paths[grep(pattern = "IL", kegg_file_paths)]
```

```{r}
GO_plot_list <- map(go_file_paths, function(file_path) {
  # Read the file
  plot_data <- read_excel(file_path)
  
  # Process the data
  processed_data <- plot_data %>%
    arrange(desc(abs(NES))) %>%
    group_by(sign_NES = sign(NES)) %>%
    slice_head(n = 10) %>%
    ungroup() %>%
    filter(padj <= 0.05)
  
  # Generate the plot
  ggplot(processed_data,
         aes(x = NES,
             y = fct_reorder(pathway, NES),
             color = padj,
             size = size
             )
         ) +
    geom_point(stat = 'identity') +
    labs(x = "NES",
         y = "Pathway",
         title = paste("Top 10 up/down Pathways for","", basename(file_path))
         ) +
    theme_bw() +
    geom_vline(xintercept = 0) +
    scale_color_viridis_c() 
    #scale_color_viridis_c(option = "A")
    #scale_color_distiller(type = "seq", palette = "YlOrRd") #+
    #theme(legend.position = "none") # Remove legend to focus on the data
})
```

```{r}
#| label: fig-go-abe

GO_plot_list[[1]]
```

```{r}
#| label: fig-go-il1b-0.1

GO_plot_list[[2]]
```

```{r}
#| label: fig-go-il1b-10

GO_plot_list[[3]]
```

```{r}
#| label: fig-go-il6-0.1

GO_plot_list[[4]]
```

```{r}
#| label: fig-go-il6-10


GO_plot_list[[5]]
```

```{r}
#| label: fig-go-plots6
#| fig-width: 12
#| fig-height: 10


GO_plot_list[[6]]
```

```{r}
#| label: fig-go-medium
#| fig-width: 12
#| fig-height: 10

GO_plot_list[[7]]

```

```{r}
#| label: fig-go-rif
#| fig-width: 12
#| fig-height: 10

GO_plot_list[[8]]
```

### GO split databases

```{r}
# Read the GO file paths, and for each dataframe, add a column denoting 
# Which GO database was used.
GO_sorted_dfs <- map(go_file_paths, function(path) {
  read_excel(path) %>%
    mutate(db = case_when(
      str_detect(pathway, "GOBP") ~ "BP",
      str_detect(pathway, "GOCC") ~ "CC",
      str_detect(pathway, "GOMF") ~ "MF"
    ))
})

# Process the dataframes. Arrange by absolute NES vaule, group on positive or 
# negative regulation. Take just top ten of each group, and filter in only stat
# significant pathways.
GO_processed_data <- map(GO_sorted_dfs, function(df) {
    df %>%
    arrange(desc(abs(NES))) %>%
    group_by(sign_NES = sign(NES)) %>%
    slice_head(n = 10) %>%
    ungroup() %>%
    filter(padj <= 0.05)
})


# Function to generate plots for each db category within a single dataframe
generate_plots <- function(df, file_path) {
  db_categories <- unique(df$db)
  plots <- map(db_categories, function(db_category) {
    filtered_data <- filter(df, db == db_category)
    plot <- ggplot(filtered_data,
                   aes(x = NES,
                       y = fct_reorder(pathway, NES),
                       color = padj,
                       size = size)) +
      geom_point(stat = 'identity') +
      labs(x = "NES",
           y = "Pathway",
           title = paste("Top 10 up/down Pathways for", db_category, basename(file_path))) +
      theme_bw() +
      geom_vline(xintercept = 0) +
      scale_color_viridis_c()
    plot
  })
  names(plots) <- db_categories
  return(plots)
}

# Map over GO_processed_data to generate plots for each dataframe
GO_plots <- map2(GO_processed_data, go_file_paths, generate_plots)

# GO_plots is a list of lists of plots, with each inner list containing three plots (one for each db category)


# Extracting treatment names from the file paths
# Assuming the treatment names are directly before "vs_vehicle.xlsx" in the file names
treatment_names <- sapply(go_file_paths, function(path) {
  # Extract the part of the filename before "vs_vehicle.xlsx"
  treatment_name <- sub(".*GO_(.*)_vs_vehicle\\.xlsx$", "\\1", basename(path))
  # Replace underscores with spaces or any other necessary formatting
  treatment_name <- gsub("_", " ", treatment_name)
  treatment_name
})

# Now, apply these names to your combined_GO_plots list
names(GO_plots) <- treatment_names

```

```{r}
#| label: fig-go-split-il1b-0.1

# Combine plots from each database
combined_plot <- GO_plots[[2]]$BP + GO_plots[[2]]$CC + GO_plots[[2]]$MF + 
  plot_layout(ncol = 1) # Arranges the plots in a single column

# Print the combined plot
print(combined_plot)
```

```{r}
#| label: fig-go-split-il1b-10
#| fig-width: 20


# Combine plots from each database
combined_plot <- GO_plots[[3]]$BP + GO_plots[[3]]$CC + GO_plots[[3]]$MF + 
  plot_layout(ncol = 1) # Arranges the plots in a single column

# Print the combined plot
print(combined_plot)
```

```{r}
#| label: fig-go-split-i6-0.1

# Combine plots from each database
combined_plot <- GO_plots[[4]]$BP + GO_plots[[4]]$CC + GO_plots[[4]]$MF + 
  plot_layout(ncol = 1) # Arranges the plots in a single column

# Print the combined plot
print(combined_plot)
```

```{r}
#| label: fig-go-split-i6-10

# Combine plots from each database
combined_plot <- GO_plots[[5]]$BP + GO_plots[[5]]$CC + GO_plots[[5]]$MF + 
  plot_layout(ncol = 1) # Arranges the plots in a single column

# Print the combined plot
print(combined_plot)
```

```{r}
#| label: fig-go-split-i6-combined

# Combine plots from each database
combined_plot <- GO_plots[[6]]$BP + GO_plots[[6]]$CC + GO_plots[[6]]$MF + 
  plot_layout(ncol = 1) # Arranges the plots in a single column

# Print the combined plot
print(combined_plot)
```

```{r}
#| label: fig-go-split-medium

# Combine plots from each database
combined_plot <- GO_plots[[7]]$BP + GO_plots[[7]]$CC + GO_plots[[7]]$MF + 
  plot_layout(ncol = 1) # Arranges the plots in a single column

# Print the combined plot
print(combined_plot)
```


# MAIN SEQ PLOTS
Lav en samlet figur med 0.1 og 10 ng/ml IL-6 og en anden med begge koncentratioenr med IL-1B. SÃ¥ laver du A, B, C for at fÃ¥ pathway analyser og vulkan plot med.

### IL1-B 
```{r}
# GO_plots$`IL1B 10`$BP
# 
# ggsave(filename = here("notebooks/seq/output/GSEA_il1b_10.png"))
# ggsave(filename = here("notebooks/seq/output/GSEA_il1b_10.pdf"))
```

```{r}
# GO_plots$`IL1B 0.1`$BP
# ggsave(filename = here("notebooks/seq/output/GSEA_il1b_01.png"))
# ggsave(filename = here("notebooks/seq/output/GSEA_il1b_01.pdf"))
```

